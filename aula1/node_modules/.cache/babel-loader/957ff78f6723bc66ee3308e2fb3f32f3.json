{"ast":null,"code":"var _jsxFileName = \"C:\\\\Carlos\\\\aula1\\\\src\\\\componentes\\\\Componente1.jsx\";\nimport React, { Fragment } from \"react\"; //na versão mais nova, não precisa importar. mas né (aqui ele tá só importando o react, do proprio react)\n//dá pra colocar vários dentro da div, se deixar em branco (tirar a div), vira um fragment (pra ter menos Divs no código)\n// export default () => ( // é uma arrow function, é todo o código que tá comentado, só que em uma linha\n//     <Fragment> \n//     <h1>Nosso componente Arrow</h1>\n//     <h2>Olá</h2>\n//     </Fragment>\n// )\n//  export default () => (5+6) // exemplo usando números, pra mostrar que ele exporta o componenete, não só a função\n//  function func1() { //criando uma função \n//     return <h1>Nosso primeiro componente</h1> //um arquivo js, conseguindo chamar um HTML. No caso, essa func retorna um título HTML\n//  }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar vf = false; // exemplo usando boolean, criou uma variavel que armazena um valor falso\n\nexport default (props =>\n/*#__PURE__*/\n// props são propriedades (o professor escolheu esse nome). As chaves {} chamam o javascript. Aqui criou uma func, que retorna tudo que eu colocar no index, em H1\n// e a soma, é uma função de soma, que eu defini isso lá no index   \n// Math é uma biblioteca (igual a do python) o random é pra aleatorio, e o pow é pra radiciação\n// chamou a variavel,  a interrogação é uma condição que se for verdade, mostra o primeiro texto e vice versa\n_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    children: props.valor\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: props.soma\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: Math.random()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: 2 ** 8\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: Math.pow(2, 8)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Verdadeiro ou Falso? \", vf ? ' Verdadeiro' : ' Falso']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 23,\n  columnNumber: 5\n}, this)); //export default func1 // exportando de modo padrão a func1, isso permite que eu possa chamar esse componente do lado de fora (no index)","map":{"version":3,"sources":["C:/Carlos/aula1/src/componentes/Componente1.jsx"],"names":["React","Fragment","vf","props","valor","soma","Math","random","pow"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAAwC;AAExC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,IAAIC,EAAE,GAAG,KAAT,C,CAAe;;AAEf,gBAAgBC,KAAD;AAAA;AAAW;AAC1B;AACA;AACA;AACI;AAAA,0BACI;AAAA,cAAKA,KAAK,CAACC;AAAX;AAAA;AAAA;AAAA;AAAA,UADJ,eAEI;AAAA,cAAKD,KAAK,CAACE;AAAX;AAAA;AAAA;AAAA;AAAA,UAFJ,eAGI;AAAA,cAAIC,IAAI,CAACC,MAAL;AAAJ;AAAA;AAAA;AAAA;AAAA,UAHJ,eAII;AAAA,cAAI,KAAG;AAAP;AAAA;AAAA;AAAA;AAAA,UAJJ,eAKI;AAAA,cAAID,IAAI,CAACE,GAAL,CAAS,CAAT,EAAW,CAAX;AAAJ;AAAA;AAAA;AAAA;AAAA,UALJ,eAMI;AAAA,wCAAyBN,EAAE,GAAG,aAAH,GAAmB,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,UANJ;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,E,CAaA","sourcesContent":["import React, { Fragment } from \"react\" //na versão mais nova, não precisa importar. mas né (aqui ele tá só importando o react, do proprio react)\r\n\r\n//dá pra colocar vários dentro da div, se deixar em branco (tirar a div), vira um fragment (pra ter menos Divs no código)\r\n\r\n// export default () => ( // é uma arrow function, é todo o código que tá comentado, só que em uma linha\r\n//     <Fragment> \r\n//     <h1>Nosso componente Arrow</h1>\r\n//     <h2>Olá</h2>\r\n//     </Fragment>\r\n// )\r\n//  export default () => (5+6) // exemplo usando números, pra mostrar que ele exporta o componenete, não só a função\r\n\r\n//  function func1() { //criando uma função \r\n//     return <h1>Nosso primeiro componente</h1> //um arquivo js, conseguindo chamar um HTML. No caso, essa func retorna um título HTML\r\n//  }\r\n\r\nvar vf = false // exemplo usando boolean, criou uma variavel que armazena um valor falso\r\n\r\nexport default (props) => // props são propriedades (o professor escolheu esse nome). As chaves {} chamam o javascript. Aqui criou uma func, que retorna tudo que eu colocar no index, em H1\r\n// e a soma, é uma função de soma, que eu defini isso lá no index   \r\n// Math é uma biblioteca (igual a do python) o random é pra aleatorio, e o pow é pra radiciação\r\n// chamou a variavel,  a interrogação é uma condição que se for verdade, mostra o primeiro texto e vice versa\r\n    <div>\r\n        <h1>{props.valor}</h1> \r\n        <h2>{props.soma}</h2>\r\n        <p>{Math.random()}</p>\r\n        <p>{2**8}</p>\r\n        <p>{Math.pow(2,8)}</p>\r\n        <p>Verdadeiro ou Falso? {vf ? ' Verdadeiro' : ' Falso'}</p>\r\n    </div>\r\n\r\n//export default func1 // exportando de modo padrão a func1, isso permite que eu possa chamar esse componente do lado de fora (no index)"]},"metadata":{},"sourceType":"module"}